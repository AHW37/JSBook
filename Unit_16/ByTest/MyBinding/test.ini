[testandroid]
name = simple_test
# 步骤1：将prefix的值修改为auto_person_binding，最后自动绑定工具生成的文件都会以这个命名或者作为前缀，例如auto_person_binding.hpp、auto_person_binding.cpp和auto_person_binding_api.js。
# prefix = autogentestbindings
prefix = auto_person_binding

# 步骤2：填写要绑定的类，多个类之间以空格隔开
# classes = SimpleNativeClass
classes = Person

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include
android_flags = -D_SIZE_T_DEFINED_

clang_headers = -I%(clangllvmdir)s/lib/clang/3.3/include 
clang_flags = -nostdinc -x c++ -std=c++11 -U __SSE__

# 步骤3：删除test测试工程C++头文件路径
# simple_test_headers = -I%(cxxgeneratordir)s/test/simple_tess
# extra_arguments = %(android_headers)s %(clang_headers)s %(android_flags)s %(clang_flags)s %(simple_test_headers)s %(extra_flags)s
extra_arguments = %(android_headers)s %(clang_headers)s %(android_flags)s %(clang_flags)s %(extra_flags)s

# 步骤4：填写要绑定的C++类头文件路径
# headers = %(cxxgeneratordir)s/MyBinding/person_binding/Person.h
headers = %(cxxgeneratordir)s/MyBinding/person_binding/Person.h

# 步骤5（可选）：填写命名空间
target_namespace = jf
remove_prefix =
skip = 
base_objects =
abstract_classes =
classes_have_type_info = no
rename =
rename_functions =
rename_classes =
# classes for which there will be no "parent" lookup
classes_have_no_parents =

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip =

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
# 注意：
script_control_cpp = yes
